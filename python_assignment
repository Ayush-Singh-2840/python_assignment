{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "797b9a16-c7c3-4fb2-a092-078a1ed22f62",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Explain the key features of Python that make it a popular choice for programming.\n",
    "\n",
    "\n",
    "\n",
    "#>>Python is a highly popular programming language due to several key features that make it versatile, easy to use, and powerful. Here is the some main reason\n",
    "#>>Easy To Learn And Use \n",
    "#>>Cross-Platform Compatibility\n",
    "#>>Versatile and Powerful\n",
    "#>>Large and Active Community\n",
    "#>>Extensive Libraries and Frameworks\n",
    "#>>Readable and Maintainable Code\n",
    "#>>There are many NUmbers of Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e12df67c-27ca-4775-a3a7-d7e3eb6b96c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Describe the role of predefined keywords in Python and provide examples of how they are used in a Program.?\n",
    "\n",
    "#>Predefined keywords in Python are reserved words that have special meanings and serve specific purposes in the language.\n",
    "\n",
    "\n",
    "#Common Python Keywords and Their Roles\n",
    "#Control Flow Keywords:\n",
    "\n",
    "#if, elif, else: Used for conditional statements.\n",
    "#for, while: Used for looping constructs.\n",
    "#break, continue: Used to control the flow of loops.\n",
    "#pass: Used as a placeholder for future code.\n",
    "\n",
    "\n",
    "#Variable and Type Keywords:\n",
    "\n",
    "#None: Represents the absence of a value.\n",
    "#True, False: Boolean values.\n",
    "#and, or, not: Logical operators.\n",
    "#is, in: Membership and identity operators.\n",
    "\n",
    "\n",
    "#Conditional Statement\n",
    "#x = 10\n",
    "#if x > 7:\n",
    " #   print(\"x is greater than 7\")\n",
    "#elif x == 5:\n",
    "   # print(\"x is equal to 7\")\n",
    "#else:\n",
    "    #print(\"x is less than 7\")\n",
    "    \n",
    "    \n",
    "    \n",
    "#Loop Statement\n",
    "# for loop\n",
    "#for i in range(7):\n",
    "    #print(i)\n",
    "\n",
    "# while loop\n",
    "#i = 0\n",
    "#while i < 5:\n",
    "    #print(i)\n",
    "    #i += 1''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08c50b8b-dcba-417d-a5e1-0bdb770ffb6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compare and contrast mutable and immutable objects in Python with examples.\n",
    "\n",
    "#Mutable Objects\n",
    "\n",
    "#Mutable objects are those that can be changed after they are created. The content of these objects can be modified, \n",
    "#and their state can be altered without changing their identity.\n",
    "\n",
    "#Examples of Mutable Objects:\n",
    "Lists:\n",
    "\n",
    "my_list = [1, 2, 3]\n",
    "print(my_list)  # Output: [1, 2, 3]\n",
    "\n",
    "my_list.append(4)\n",
    "print(my_list)  # Output: [1, 2, 3, 4]\n",
    "\n",
    "my_list[0] = 10\n",
    "print(my_list)  # Output: [10, 2, 3, 4]\n",
    "\n",
    "\n",
    "#Immutable Objects\n",
    "\n",
    "#Immutable objects, on the other hand, cannot be changed after they are created. Any modification to an immutable object results in the creation of a new object.\n",
    "\n",
    "\n",
    "#Integers, Floats, and Booleans:\n",
    "\n",
    "x = 5\n",
    "print(x)  # Output: 5\n",
    "\n",
    "# Any arithmetic operation on x results in a new integer object\n",
    "x = x + 1\n",
    "print(x)  # Output: 6\n",
    "\n",
    "# Similar behavior applies to floats and booleans\n",
    "y = 3.14\n",
    "print(y)  # Output: 3.14\n",
    "\n",
    "y = y * 2\n",
    "print(y)  # Output: 6.28\n",
    "\n",
    "z = True\n",
    "print(z)  # Output: True\n",
    "\n",
    "z = not z\n",
    "print(z)  # Output: False\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e94b9c0-d226-42c7-aa8b-d4a4c6fdd0cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Discuss the different types of operators in Python and provide examples of how they are used.\n",
    "\n",
    "#Python supports a wide variety of operators that can be used to perform different operations on variables and values. Here's an overview of the different types of operators in Python, along with examples of how they are used:\n",
    "\n",
    "1. Arithmetic Operators\n",
    "These operators are used to perform mathematical operations.\n",
    "\n",
    "#Addition (+)\n",
    "\n",
    "a = 10\n",
    "b = 5\n",
    "result = a + b\n",
    "print(result)  # Output: 15\n",
    "\n",
    "#Subtraction (-)\n",
    "\n",
    "result = a - b\n",
    "print(result)  # Output: 5\n",
    "\n",
    "#Multiplication (*)\n",
    "\n",
    "result = a * b\n",
    "print(result)  # Output: 50\n",
    "\n",
    "#Division (/)\n",
    "\n",
    "result = a / b\n",
    "print(result)  # Output: 2.0\n",
    "\n",
    "#Floor Division (//)\n",
    "\n",
    "result = a // b\n",
    "print(result)  # Output: 2\n",
    "\n",
    "#Modulus (%)\n",
    "\n",
    "result = a % b\n",
    "print(result)  # Output: 0\n",
    "\n",
    "#Exponentiation (**)\n",
    "\n",
    "result = a ** b\n",
    "print(result)  # Output: 100000\n",
    "\n",
    "# Comparison Operators\n",
    "#These operators compare two values and return a Boolean result.\n",
    "\n",
    "#Equal (==)\n",
    "\n",
    "result = (a == b)\n",
    "print(result)  # Output: False\n",
    "\n",
    "#Not Equal (!=)\n",
    "\n",
    "result = (a != b)\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Greater Than (>)\n",
    "\n",
    "result = (a > b)\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Less Than (<)\n",
    "\n",
    "result = (a < b)\n",
    "print(result)  # Output: False\n",
    "\n",
    "#Greater Than or Equal To (>=)\n",
    "\n",
    "result = (a >= b)\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Less Than or Equal To (<=)\n",
    "\n",
    "result = (a <= b)\n",
    "print(result)  # Output: False\n",
    "\n",
    "#Logical Operators\n",
    "#These operators are used to combine conditional statements.\n",
    "\n",
    "#AND (and)\n",
    "\n",
    "result = (a > 0 and b > 0)\n",
    "print(result)  # Output: True\n",
    "\n",
    "#OR (or)\n",
    "\n",
    "result = (a > 0 or b > 0)\n",
    "print(result)  # Output: True\n",
    "\n",
    "#NOT (not)\n",
    "\n",
    "result = not(a > 0)\n",
    "print(result)  # Output: False\n",
    "\n",
    "#Bitwise Operators\n",
    "#These operators perform bit-level operations on integers.\n",
    "\n",
    "#AND (&)\n",
    "\n",
    "result = a & b\n",
    "print(result)  # Output: 0 (1010 & 0101 = 0000)\n",
    "\n",
    "#OR (|)\n",
    "\n",
    "result = a | b\n",
    "print(result)  # Output: 15 (1010 | 0101 = 1111)\n",
    "\n",
    "#XOR (^)\n",
    "\n",
    "result = a ^ b\n",
    "print(result)  # Output: 15 (1010 ^ 0101 = 1111)\n",
    "\n",
    "#NOT (~)\n",
    "\n",
    "result = ~a\n",
    "print(result)  # Output: -11 (inverts all bits)\n",
    "\n",
    "#Left Shift (<<)\n",
    "\n",
    "result = a << 1\n",
    "print(result)  # Output: 20 (1010 << 1 = 10100)\n",
    "\n",
    "#Right Shift (>>)\n",
    "\n",
    "result = a >> 1\n",
    "print(result)  # Output: 5 (1010 >> 1 = 0101)\n",
    "\n",
    "#Assignment Operators\n",
    "#These operators are used to assign values to variables.\n",
    "\n",
    "#Assign (=)\n",
    "a = 10\n",
    "\n",
    "#Add and Assign (+=)\n",
    "\n",
    "a += 5  # Equivalent to a = a + 5\n",
    "print(a)  # Output: 15\n",
    "\n",
    "#Subtract and Assign (-=)\n",
    "\n",
    "a -= 5  # Equivalent to a = a - 5\n",
    "print(a)  # Output: 10\n",
    "\n",
    "#Multiply and Assign (*=)\n",
    "\n",
    "a *= 2  # Equivalent to a = a * 2\n",
    "print(a)  # Output: 20\n",
    "\n",
    "#Divide and Assign (/=)\n",
    "\n",
    "a /= 2  # Equivalent to a = a / 2\n",
    "print(a)  # Output: 10.0\n",
    "\n",
    "#Floor Divide and Assign (//=)\n",
    "\n",
    "a //= 2  # Equivalent to a = a // 2\n",
    "print(a)  # Output: 5.0\n",
    "\n",
    "#Modulus and Assign (%=)\n",
    "\n",
    "a %= 3  # Equivalent to a = a % 3\n",
    "print(a)  # Output: 2.0\n",
    "\n",
    "#Exponentiation and Assign (**=)\n",
    "\n",
    "a **= 3  # Equivalent to a = a ** 3\n",
    "print(a)  # Output: 8.0\n",
    "\n",
    "#Bitwise AND and Assign (&=)\n",
    "\n",
    "a &= 2  # Equivalent to a = a & 2\n",
    "print(a)  # Output: 0.0\n",
    "\n",
    "#Bitwise OR and Assign (|=)\n",
    "\n",
    "a |= 2  # Equivalent to a = a | 2\n",
    "print(a)  # Output: 2.0\n",
    "\n",
    "#Bitwise XOR and Assign (^=)\n",
    "\n",
    "a ^= 2  # Equivalent to a = a ^ 2\n",
    "print(a)  # Output: 0.0\n",
    "\n",
    "#Bitwise Left Shift and Assign (<<=)\n",
    "\n",
    "a <<= 1  # Equivalent to a = a << 1\n",
    "print(a)  # Output: 0.0\n",
    "\n",
    "#Bitwise Right Shift and Assign (>>=)\n",
    "\n",
    "a >>= 1  # Equivalent to a = a >> 1\n",
    "print(a)  # Output: 0.0\n",
    "\n",
    "#Membership Operators\n",
    "#These operators test for membership in a sequence, such as strings, lists, or tuples.\n",
    "\n",
    "#In (in)\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5]\n",
    "result = 3 in my_list\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Not In (not in)\n",
    "\n",
    "result = 6 not in my_list\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Identity Operators\n",
    "#These operators compare the memory locations of two objects.\n",
    "\n",
    "#Is (is)\n",
    "\n",
    "a = [1, 2, 3]\n",
    "b = a\n",
    "result = a is b\n",
    "print(result)  # Output: True\n",
    "\n",
    "#Is Not (is not)\n",
    "\n",
    "b = a[:]\n",
    "result = a is not b\n",
    "print(result)  # Output: True\n",
    "\n",
    "#THis is a Different Types Of Operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab0ea687-0a90-4e70-8905-a3fbdb6523e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Explain the concept of type casting in Python with examples.\n",
    "\n",
    "#>>Type casting in Python refers to the process of converting one data type into another. This is useful when you need to perform operations that require a specific data type or when you need to convert data from one type to another to meet the requirements of an operation or function. Python provides several built-in functions for type casting.\n",
    "\n",
    "#Common Type Casting Functions\n",
    "int(): Converts a value to an integer.\n",
    "float(): Converts a value to a floating-point number.\n",
    "str(): Converts a value to a string.\n",
    "list(): Converts a value to a list.\n",
    "tuple(): Converts a value to a tuple.\n",
    "set(): Converts a value to a set.\n",
    "dict(): Converts a sequence of key-value pairs to a dictionary.\n",
    "\n",
    "#Examples of Type Casting\n",
    "\n",
    "#Converting to Integer (int)\n",
    "\n",
    "# Converting a float to an integer\n",
    "float_val = 3.14\n",
    "int_val = int(float_val)\n",
    "print(int_val)  # Output: 3\n",
    "\n",
    "# Converting a string to an integer\n",
    "str_val = \"42\"\n",
    "int_val = int(str_val)\n",
    "print(int_val)  # Output: 42\n",
    "\n",
    "#Converting to Float (float)\n",
    "# Converting an integer to a float\n",
    "int_val = 10\n",
    "float_val = float(int_val)\n",
    "print(float_val)  # Output: 10.0\n",
    "\n",
    "# Converting a string to a float\n",
    "str_val = \"3.14\"\n",
    "float_val = float(str_val)\n",
    "print(float_val)  # Output: 3.14\n",
    "\n",
    "#Converting to String (str)\n",
    "\n",
    "# Converting an integer to a string\n",
    "int_val = 100\n",
    "str_val = str(int_val)\n",
    "print(str_val)  # Output: \"100\"\n",
    "\n",
    "# Converting a float to a string\n",
    "float_val = 9.81\n",
    "str_val = str(float_val)\n",
    "print(str_val)  # Output: \"9.81\"\n",
    "\n",
    "#Converting to List (list)\n",
    "\n",
    "# Converting a string to a list of characters\n",
    "str_val = \"hello\"\n",
    "list_val = list(str_val)\n",
    "print(list_val)  # Output: ['h', 'e', 'l', 'l', 'o']\n",
    "\n",
    "# Converting a tuple to a list\n",
    "tuple_val = (1, 2, 3)\n",
    "list_val = list(tuple_val)\n",
    "print(list_val)  # Output: [1, 2, 3]\n",
    "\n",
    "#Converting to Tuple (tuple)\n",
    "\n",
    "# Converting a list to a tuple\n",
    "list_val = [1, 2, 3]\n",
    "tuple_val = tuple(list_val)\n",
    "print(tuple_val)  # Output: (1, 2, 3)\n",
    "\n",
    "# Converting a string to a tuple of characters\n",
    "str_val = \"abc\"\n",
    "tuple_val = tuple(str_val)\n",
    "print(tuple_val)  # Output: ('a', 'b', 'c')\n",
    "\n",
    "#Converting to Set (set)\n",
    "\n",
    "# Converting a list to a set\n",
    "list_val = [1, 2, 2, 3, 3, 3]\n",
    "set_val = set(list_val)\n",
    "print(set_val)  # Output: {1, 2, 3}\n",
    "\n",
    "# Converting a string to a set of characters\n",
    "str_val = \"banana\"\n",
    "set_val = set(str_val)\n",
    "print(set_val)  # Output: {'b', 'a', 'n'}\n",
    "\n",
    "#Converting to Dictionary (dict)\n",
    "# Converting a list of tuples to a dictionary\n",
    "list_of_tuples = [('a', 1), ('b', 2), ('c', 3)]\n",
    "dict_val = dict(list_of_tuples)\n",
    "print(dict_val)  # Output: {'a': 1, 'b': 2, 'c': 3}\n",
    "\n",
    "# Converting a tuple of tuples to a dictionary\n",
    "tuple_of_tuples = (('x', 24), ('y', 25))\n",
    "dict_val = dict(tuple_of_tuples)\n",
    "print(dict_val)  # Output: {'x': 24, 'y': 25}\n",
    "\n",
    "#Implicit vs Explicit Type Casting\n",
    "#Implicit Type Casting (Coercion): Python automatically converts one data type to another when appropriate.\n",
    "\n",
    "x = 10\n",
    "y = 2.5\n",
    "result = x + y  # x (int) is implicitly converted to float\n",
    "print(result)  # Output: 12.5\n",
    "print(type(result))  # Output: <class 'float'>\n",
    "\n",
    "#Explicit Type Casting: The programmer manually converts one data type to another using casting functions.\n",
    "\n",
    "\n",
    "x = \"100\"\n",
    "y = int(x)  # Explicitly converting string to int\n",
    "print(y)  # Output: 100\n",
    "print(type(y))  # Output: <class 'int'>\n",
    "\n",
    "#Type casting is a useful feature in Python that allows you to convert values between different data types, making it easier to perform operations that require specific types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22a9b8a9-6d08-4b61-812a-dcd09052c004",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# How do conditional statements work in Python? Illustrate with examples.\n",
    "\n",
    "\n",
    "#>Conditional statements in Python allow you to execute certain blocks of code based on whether a condition is true or false.\n",
    "#>The primary conditional statements in Python are if, elif, and else.\n",
    "\n",
    "#if Statement\n",
    "#The if statement evaluates a condition, and if the condition is true, it executes the associated block of code.\n",
    "\n",
    "x = 10\n",
    "\n",
    "if x > 5:\n",
    "    print(\"x is greater than 5\")\n",
    "# Output: x is greater than 5\n",
    "\n",
    "#elif Statement\n",
    "#The elif (short for else if) statement allows you to check multiple conditions. If the first if condition is false, it checks the next elif condition, and so on.\n",
    "\n",
    "x = 10\n",
    "\n",
    "if x > 15:\n",
    "    print(\"x is greater than 15\")\n",
    "elif x > 5:\n",
    "    print(\"x is greater than 5 but less than or equal to 15\")\n",
    "else:\n",
    "    print(\"x is 5 or less\")\n",
    "# Output: x is greater than 5 but less than or equal to 15\n",
    "\n",
    "\n",
    "#else Statement\n",
    "#The else statement catches anything which isn't caught by the preceding if and elif conditions. It executes the associated block of code when all previous conditions are false.\n",
    "\n",
    "x = 3\n",
    "\n",
    "if x > 5:\n",
    "    print(\"x is greater than 5\")\n",
    "elif x > 2:\n",
    "    print(\"x is greater than 2 but less than or equal to 5\")\n",
    "else:\n",
    "    print(\"x is 2 or less\")\n",
    "# Output: x is greater than 2 but less than or equal to 5\n",
    "\n",
    "#Combining Conditions\n",
    "#You can combine multiple conditions using logical operators like and, or, and not.\n",
    "\n",
    "#Using and:\n",
    "\n",
    "x = 7\n",
    "\n",
    "if x > 5 and x < 10:\n",
    "    print(\"x is between 5 and 10\")\n",
    "# Output: x is between 5 and 10\n",
    "\n",
    "#Using or:\n",
    "\n",
    "x = 2\n",
    "\n",
    "if x < 5 or x > 10:\n",
    "    print(\"x is either less than 5 or greater than 10\")\n",
    "# Output: x is either less than 5 or greater than 10\n",
    "\n",
    "#Using not:\n",
    "\n",
    "x = 5\n",
    "\n",
    "if not (x == 5):\n",
    "    print(\"x is not 5\")\n",
    "else:\n",
    "    print(\"x is 5\")\n",
    "# Output: x is 5\n",
    "\n",
    "#Nested Conditional Statements\n",
    "#You can nest if, elif, and else statements within each other to check multiple conditions in a more complex way.\n",
    "\n",
    "x = 8\n",
    "\n",
    "if x > 5:\n",
    "    if x > 7:\n",
    "        print(\"x is greater than 7\")\n",
    "    else:\n",
    "        print(\"x is greater than 5 but not greater than 7\")\n",
    "else:\n",
    "    print(\"x is 5 or less\")\n",
    "# Output: x is greater than 7\n",
    "\n",
    "\n",
    "#Example: Checking if a Number is Positive, Negative, or Zero\n",
    "\n",
    "#Here’s a complete example that checks whether a number is positive, negative, or zero.\n",
    "\n",
    "num = float(input(\"Enter a number: \"))\n",
    "\n",
    "if num > 0:\n",
    "    print(\"The number is positive\")\n",
    "elif num < 0:\n",
    "    print(\"The number is negative\")\n",
    "else:\n",
    "    print(\"The number is zero\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a32257f-7fe2-4143-beab-d22021fa1bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Describe the different types of loops in Python and their use cases with examples.\n",
    "\n",
    "\n",
    "#In Python, loops are used to execute a block of code repeatedly. Python supports two main types of loops: for loops and while loops.\n",
    "\n",
    "#for Loop\n",
    "#A for loop is used to iterate over a sequence (such as a list, tuple, string, or range). It is useful when you know the number of iterations in advance or when iterating over a collection.\n",
    "\n",
    "#Use Case: Iterating Over a List\n",
    "\n",
    "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
    "for fruit in fruits:\n",
    "    print(fruit)\n",
    "# Output:\n",
    "# apple\n",
    "# banana\n",
    "# cherry\n",
    "\n",
    "#Use Case: Iterating Over a String\n",
    "\n",
    "for char in \"hello\":\n",
    "    print(char)\n",
    "# Output:\n",
    "# h\n",
    "# e\n",
    "# l\n",
    "# l\n",
    "# o\n",
    "\n",
    "#Use Case: Using range()\n",
    "\n",
    "for i in range(5):\n",
    "    print(i)\n",
    "# Output:\n",
    "# 0\n",
    "# 1\n",
    "# 2\n",
    "# 3\n",
    "# 4\n",
    "\n",
    "#while Loop\n",
    "#A while loop is used to repeatedly execute a block of code as long as a condition is true. It is useful when the number of iterations is not known in advance and depends on some condition.\n",
    "\n",
    "#Use Case: Simple Counter\n",
    "\n",
    "count = 0\n",
    "while count < 5:\n",
    "    print(count)\n",
    "    count += 1\n",
    "# Output:\n",
    "# 0\n",
    "# 1\n",
    "# 2\n",
    "# 3\n",
    "# 4\n",
    "\n",
    "#Use Case: User Input Validation\n",
    "\n",
    "user_input = \"\"\n",
    "while user_input.lower() != \"quit\":\n",
    "    user_input = input(\"Enter something (type 'quit' to exit): \")\n",
    "    print(f\"You entered: {user_input}\")\n",
    "# This loop will continue until the user types 'quit'.\n",
    "\n",
    "#break and continue Statements\n",
    "#break: Terminates the loop and transfers control to the statement following the loop.\n",
    "#continue: Skips the rest of the code inside the loop for the current iteration and moves to the next iteration.\n",
    "#Use Case: Using break\n",
    "\n",
    "for i in range(10):\n",
    "    if i == 5:\n",
    "        break\n",
    "    print(i)\n",
    "# Output:\n",
    "# 0\n",
    "# 1\n",
    "# 2\n",
    "# 3\n",
    "# 4\n",
    "\n",
    "#Use Case: Using continue\n",
    "\n",
    "for i in range(10):\n",
    "    if i % 2 == 0:\n",
    "        continue\n",
    "    print(i)\n",
    "# Output:\n",
    "# 1\n",
    "# 3\n",
    "# 5\n",
    "# 7\n",
    "# 9\n",
    "\n",
    "#Nested Loops\n",
    "#You can use loops inside another loop. This is known as nested loops.\n",
    "\n",
    "#Use Case: Multiplication Table\n",
    "\n",
    "for i in range(1, 6):\n",
    "    for j in range(1, 6):\n",
    "        print(i * j, end=\"\\t\")\n",
    "    print()\n",
    "# Output:\n",
    "# 1\t2\t3\t4\t5\t\n",
    "# 2\t4\t6\t8\t10\t\n",
    "# 3\t6\t9\t12\t15\t\n",
    "# 4\t8\t12\t16\t20\t\n",
    "# 5\t10\t15\t20\t25\n",
    "\n",
    "#else Clause with Loops\n",
    "#Python allows an optional else clause with loops. The else block is executed when the loop terminates naturally (i.e., not by a break statement).\n",
    "\n",
    "#Use Case: else with for Loop\n",
    "\n",
    "for i in range(5):\n",
    "    print(i)\n",
    "else:\n",
    "    print(\"Loop completed without break\")\n",
    "# Output:\n",
    "# 0\n",
    "# 1\n",
    "# 2\n",
    "# 3\n",
    "# 4\n",
    "# Loop completed without break\n",
    "\n",
    "#Use Case: else with while Loop\n",
    "\n",
    "count = 0\n",
    "while count < 5:\n",
    "    print(count)\n",
    "    count += 1\n",
    "else:\n",
    "    print(\"Loop completed without break\")\n",
    "# Output:\n",
    "# 0\n",
    "# 1\n",
    "# 2\n",
    "# 3\n",
    "# 4\n",
    "# Loop completed without break\n",
    "\n",
    "#for Loop: Best for iterating over a sequence when the number of iterations is known or finite.\n",
    "#while Loop: Best for conditions where the number of iterations is not known beforehand and depends on some condition.\n",
    "#break: Used to exit the loop prematurely.\n",
    "#continue: Used to skip the current iteration and continue with the next one.\n",
    "#Nested Loops: Useful for working with multi-dimensional data structures.\n",
    "#else Clause: Executes after the loop completes normally, without encountering a break."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adc6d08c-b3c9-4bdf-bec0-25408110cedf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9dc0d95e-7bb6-4ecb-b862-00fc284cc886",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abcfbbba-6955-4f33-b9b5-865b2ebd02a7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03b79979-ea9e-4c57-975a-8f920b4e68e6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a03c044e-0ea7-4a30-bdfc-0cbab8f20351",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65615c9a-d158-41a4-a566-203413563435",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d04bbba-d2dc-4411-a3bc-d72b084c5842",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f99a0cc0-c604-4875-9c19-d773b8f18031",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95b1bf05-2010-4955-ad2b-8037190953dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b57d521c-aeff-495e-a213-5ef63e6dd1e1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b49c75da-a3de-41f4-a348-d2348d9168f3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c4deabd-f5c1-41a7-8240-b805b079bc99",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e436a39c-ec20-4cdc-9eb7-8a8050e36990",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afb92ecc-1e8b-4f9f-bd02-bd9221d4cb9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f1e8157-2da7-4620-9277-b22a0eab295a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
